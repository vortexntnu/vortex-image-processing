name: Python CI

on: [push, workflow_dispatch]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Lint Code
        shell: bash
        run: |
          pip install -r requirements.txt
          pip install -U pylint
          pylint $(git ls-files '*.py')

  test:
    runs-on: ubuntu-latest
    env:
      ROBOFLOW_API_KEY: ${{ secrets.ROBOFLOW_API_KEY }}
      ROBOFLOW_PROJECT_ID: ${{ secrets.ROBOFLOW_PROJECT_ID }}
      WORKSPACE: ${{ secrets.WORKSPACE }}
      ROBOFLOW_PROJECT_VERSION: ${{ secrets.ROBOFLOW_PROJECT_VERSION }}
      DATASET_FORMAT: ${{ vars.DATASET_FORMAT }}
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Print Environment Variables
        run: |
          echo "ROBOFLOW_API_KEY: $ROBOFLOW_API_KEY"
          echo "ROBOFLOW_PROJECT_ID: $ROBOFLOW_PROJECT_ID"
          echo "WORKSPACE: $WORKSPACE"
          echo "ROBOFLOW_PROJECT_VERSION: $ROBOFLOW_PROJECT_VERSION"
          echo "DATASET_FORMAT: $DATASET_FORMAT"

      - name: Run tests
        shell: bash
        run: |
          pip install -r requirements.txt
          pip install -U pytest
          pytest --capture=sys --disable-warnings -v

  codecov:
    runs-on: ubuntu-latest
    needs: test
    env:
      ROBOFLOW_API_KEY: ${{ secrets.ROBOFLOW_API_KEY }}
      ROBOFLOW_PROJECT_ID: ${{ secrets.ROBOFLOW_PROJECT_ID }}
      WORKSPACE: ${{ secrets.WORKSPACE }}
      ROBOFLOW_PROJECT_VERSION: ${{ secrets.ROBOFLOW_PROJECT_VERSION }}
      DATASET_FORMAT: ${{ vars.DATASET_FORMAT }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v2
        with:
          python-version: "3.11"
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: Run tests and collect coverage
        run: pytest --cov=api.calculator --cov-report=xml
      - name: Upload coverage reports to Codecov with GitHub Action
        uses: codecov/codecov-action@v4.2.0
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
